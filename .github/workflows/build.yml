name: CI
on:
  #push:
  #  branches:
  #    - master

env:
  REGISTRY: ghcr.io
  ACI_RESOURCE_GROUP: github-actions-aci

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      buildNumber: ${{ steps.variables_adopt.outputs.num }}
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Code Build & Test
        id: build
        working-directory: ./nms
        run: mvn clean package
      - name: Uploading Dockerfile & war
        uses: actions/upload-artifact@v3
        with:
          name: dockerfile-and-war
          path: |
            nms/Dockerfile
            nms/target/nms*.war
          retention-days: 1
      - name: Setting Environment Variables
        id: variables_adopt
        run: |
          echo "::set-output name=num::nms.0.${{ github.run_number }}"
      - name: Publish result
        if: always()
        run: |
          echo "Status: ${{steps.build.outcome}}"
          echo "Status2: ${{steps.build.conclusion}}"
          
  analysis:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Static Code Analysis
        id: analysis
        working-directory: ./nms
        #run: echo ${{ needs.build.outputs.buildNumber }}
        run: mvn verify sonar:sonar -Dsonar.host.url=https://sonarcloud.io/ -Dsonar.organization=ktgirish -Dsonar.projectKey=nms-github-actions -Dsonar.login=${{secrets.SONAR_TOKEN}}
      - name: Publish result
        if: always()
        run: |
          echo "Status: ${{steps.analysis.outcome}}"
          echo "Status2: ${{steps.analysis.conclusion}}"
          
  artifact_management:
    needs: [build, analysis]
    runs-on: ubuntu-latest
    steps:
      - name: Downloading Dockerfile & war
        uses: actions/download-artifact@v2
        with:
          name: dockerfile-and-war
      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and Push Docer image to Registry
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build.outputs.buildNumber }}
          
  dev_deployment:
    needs: [build, analysis, artifact_management]
    runs-on: ubuntu-latest
    steps:
      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login via Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Dev Deployment
        uses: Azure/aci-deploy@v1
        with:
          resource-group: ${{ env.ACI_RESOURCE_GROUP }}
          dns-name-label: nms-dev
          image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build.outputs.buildNumber }}
          name: nms-dev
          ports: 8080
          location: 'east us'